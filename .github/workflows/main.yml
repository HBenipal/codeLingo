name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, admin, backend/user-service, backend/auth-service, backend/problem-service, backend/lesson-service, backend/match-making-service]
    continue-on-error: true   # Allow the workflow to continue even if the tests fail
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          npm install

      - name: Run tests
        run: |
          cd ${{ matrix.service }}
          npm test

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [frontend, admin, backend/user-service, backend/auth-service, backend/problem-service, backend/lesson-service, backend/match-making-service]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          SERVICE_NAME=$(basename ${{ matrix.service }})
          docker build -t ${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:latest ${{ matrix.service }}
          docker push ${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:latest

      - name: Build and Push Versioned Docker image
        run: |
          SERVICE_NAME=$(basename ${{ matrix.service }})
          VERSION=$(date +'%Y%m%d%H%M%S')
          docker build -t ${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:$VERSION ${{ matrix.service }}
          docker push ${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:$VERSION

  deploy:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        service: [frontend, admin, backend/user-service, backend/auth-service, backend/problem-service, backend/lesson-service, backend/match-making-service]
    steps:
      - name: Log in to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Deploy to Lambda
        env:
          ECR_REGISTRY: secrets.ECR_REGISTRY
        run: |
          SERVICE_NAME=$(basename ${{ matrix.service }})
          LAMBDA_FUNCTION_NAME=codeify-${SERVICE_NAME//\//-}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker tag ${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:latest $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}/$SERVICE_NAME:latest
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}/$SERVICE_NAME:latest
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}/$SERVICE_NAME:latest
